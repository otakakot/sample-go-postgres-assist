// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: todos.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const listTodoByUserID = `-- name: ListTodoByUserID :many
SELECT 
    todos.id, todos.created_at, todos.updated_at, todos.title, todos.completed, todos.user_id,
    users.name as user_name
FROM todos 
JOIN users ON todos.user_id = users.id
WHERE todos.user_id = $1
`

type ListTodoByUserIDRow struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Title     string
	Completed bool
	UserID    uuid.UUID
	UserName  string
}

func (q *Queries) ListTodoByUserID(ctx context.Context, userID uuid.UUID) ([]ListTodoByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listTodoByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTodoByUserIDRow
	for rows.Next() {
		var i ListTodoByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Completed,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodos = `-- name: ListTodos :many
SELECT id, created_at, updated_at, title, completed, user_id FROM todos
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Completed,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
